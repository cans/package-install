---
- name: "cans.package-install Role Test Suite"
  hosts: servers
  remote_user: root
  vars:
    binary: "/usr/bin/vim"
    packages: ['vim']
  pre_tasks:
    - name: "Ensure {{ binary | basename }}'s not already installed"
      stat:
        path: "{{ binary }}"
      register: binary_state
      failed_when: 'binary_state.stat.exists'  # and vim_state

  roles:
    - role: "package-install"
      pkginstall_packages_present: "{{ packages }}"
      pkginstall_cache_update: false
      become: yes

  tasks:
    - name: "Ensure {{ binary | basename }} was installed"
      stat:
        path: "{{ binary }}"
      register: binary_state
      failed_when: 'binary_state is not success and binary_state.stat.executable'


- name: "Ensure `pkginstallpackages` overrides `pkginsall_packages_present` and `pkginstall_cache_purge` is effective."
  hosts: servers
  remote_user: root
  vars:
    binary: "/usr/bin/hello"
    packages: ['hello']
  pre_tasks:
    - name: "Ensure {{ binary | basename }}'s not already installed"
      stat:
        path: "{{ binary }}"
      register: binary_state
      failed_when: 'binary_state.stat.exists'  # and binary_state

  roles:
    - role: "package-install"
      pkginstall_packages_present: "{{ packages }}"
      pkginstall_cache_purge: true
      # pkginstall_cache_ttl: 1
      pkginstall_cache_update: true
      become: yes

  tasks:

    - name: "Ensure {{ binary | basename }} was installed"
      stat:
        path: "{{ binary }}"
      register: binary_state
      failed_when: 'binary_state is not success and binary_state.stat.executable'

    - name: "List Distribution Package Manager Cache Files"
      find:
        paths: "{{ pkginstall_apt_package_list_cache_directory }}"
        patterns: "*"
      when: "ansible_distribution in ['Debian', 'Ubuntu', ] and pkginstall_cache_purge"
      register: cache_files
      failed_when: "cache_files.matched > 0"


- name: "Ensure `pkginstall_cache_update` is effective"
  hosts: servers
  remote_user: root
  vars:
    binary: "/usr/bin/nano"
    packages: ['nano']
  pre_tasks:
    - name: "Ensure {{ binary | basename }}'s not already installed"
      stat:
        path: "{{ binary }}"
      register: binary_state
      failed_when: 'binary_state.stat.exists'  # and binary_state

  roles:
    - role: "package-install"
      pkginstall_packages_present: "{{ packages }}"
      pkginstall_cache_purge: false
      pkginstall_cache_update: true
      pkginstall_cache_ttl: 1
      become: yes

  tasks:

    - name: "Ensure {{ binary | basename }} was installed"
      stat:
        path: "{{ binary }}"
      register: binary_state
      failed_when: 'binary_state is not success and binary_state.stat.executable'

    - name: "List Distribution Package Manager Cache Files"
      find:
        paths: "{{ pkginstall_apt_package_list_cache_directory }}"
        patterns: "*"
      when: "ansible_distribution in ['Debian', 'Ubuntu', ] and pkginstall_cache_purge"
      register: cache_files
      failed_when: "cache_files.matched == 0"


- name: "Ensure `pkginstall_packages_absent` is effective"
  hosts: servers
  remote_user: root

  pre_tasks:
    - name: "Ensure {{ binaries | map('basename') | join(', ') }} are installed"
      stat:
        path: "{{ binaries }}"
      register: binaries_state
      failed_when: 'binary_state.stat.exists'  # and binary_state

  roles:
    - role: "package-install"
      pkginstall_packages_absent: "{{ packages }}"
      pkginstall_cache_purge: false
      pkginstall_cache_update: true
      pkginstall_cache_ttl: 1
      become: yes

  tasks:

    - name: "Ensure {{ binaries | map('basename') | join(', ') }} were removed"
      stat:
        path: "{{ item }}"
      with_items: "{{ binaries }}"
      register: binaries_state
      failed_when: "binaries_state is not success and binaries_state.results | selectattr('stat.exists') | length > 0"


- name: "Ensure intersection check on `pkginstall_package_absent` and `pkginstall_packages_present` is effective"
  hosts: servers

  tasks:
    - name: "Generate inventory for Ansible nested calls"
      local_action:
        module: template
        src: "inventory.ini"
        dest: "{{playbook_dir}}/{{ subinventory_file }}"

    - name: "Run playbook feeding the role with conflicting lists of packages"
      local_action:
        module: command
        cmd: "ansible-playbook -i {{playbook_dir}}/{{ subinventory_file }} --connection=local {{ playbook_dir }}/packages-both-present-and-absent.yml"
        args:
          chdir: "{{ playbook_dir }}/.."
      connection: local
      register: intersection_check
      changed_when: false
      # ansible-playbook rc == 2 means some task failed (cf. https://github.com/ansible/ansible/issues/19720)
      failed_when: "intersection_check is success or intersection_check.rc != 2 or 'You asked the following packages to be both absent and present' not in intersection_check.stdout"

    - name: "Show command result"
      debug:
        var: intersection_check


- name: "Cleanup tasks"
  hosts: localhost
  tasks:
    - name: "Remove locally generated files"
      file:
        state: absent
        path: "{{ item }}"
      with_items: "{{ [subinventory_file] }}"
      # loop: "{{ lookup('list', subinventory_file, wantlist=True) }}"


# vim: et:sw=2:syntax=yaml:ts=2:
